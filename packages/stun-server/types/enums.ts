import * as v from 'valibot';

export enum EMessageType {
    BINDING_REQUEST = 0x0001,
    BINDING_RESPONSE = 0x0101,
    BINDING_ERROR_RESPONSE = 0x0111,
    SHARED_SECRET_REQUEST = 0x0002,
    SHARED_SECRET_RESPONSE = 0x0102,
    SHARED_SECRET_ERROR_RESPONSE = 0x0112,
    ALLOCATE_REQUEST = 0x0003,
    ALLOCATE_RESPONSE = 0x0103,
    ALLOCATE_ERROR_RESPONSE = 0x0113,
    REFRESH_REQUEST = 0x0004,
    REFRESH_RESPONSE = 0x0104,
    REFRESH_ERROR_RESPONSE = 0x0114,
    SEND_INDICATION = 0x0006,
    DATA_INDICATION = 0x0106,
    CREATE_PERMISSION_REQUEST = 0x0008,
    CREATE_PERMISSION_RESPONSE = 0x0108,
    CHANNEL_BIND_REQUEST = 0x0009,
    CHANNEL_BIND_RESPONSE = 0x0109,
    CHANNEL_BIND_ERROR_RESPONSE = 0x0119,
    CONNECT_REQUEST = 0x000a,
    CONNECT_RESPONSE = 0x010a,
    CONNECT_ERROR_RESPONSE = 0x011a,
    ADDRESS_INDICATION = 0x000e,
    ADDRESS_INDICATION_ERROR_RESPONSE = 0x011e,
}

export const messageTypeNameMap = {
    [EMessageType.BINDING_REQUEST]: 'BINDING_REQUEST',
    [EMessageType.BINDING_RESPONSE]: 'BINDING_RESPONSE',
    [EMessageType.BINDING_ERROR_RESPONSE]: 'BINDING_ERROR_RESPONSE',
    [EMessageType.SHARED_SECRET_REQUEST]: 'SHARED_SECRET_REQUEST',
    [EMessageType.SHARED_SECRET_RESPONSE]: 'SHARED_SECRET_RESPONSE',
    [EMessageType.SHARED_SECRET_ERROR_RESPONSE]: 'SHARED_SECRET_ERROR_RESPONSE',
    [EMessageType.ALLOCATE_REQUEST]: 'ALLOCATE_REQUEST',
    [EMessageType.ALLOCATE_RESPONSE]: 'ALLOCATE_RESPONSE',
    [EMessageType.ALLOCATE_ERROR_RESPONSE]: 'ALLOCATE_ERROR_RESPONSE',
    [EMessageType.REFRESH_REQUEST]: 'REFRESH_REQUEST',
    [EMessageType.REFRESH_RESPONSE]: 'REFRESH_RESPONSE',
    [EMessageType.REFRESH_ERROR_RESPONSE]: 'REFRESH_ERROR_RESPONSE',
    [EMessageType.SEND_INDICATION]: 'SEND_INDICATION',
    [EMessageType.DATA_INDICATION]: 'DATA_INDICATION',
    [EMessageType.CREATE_PERMISSION_REQUEST]: 'CREATE_PERMISSION_REQUEST',
    [EMessageType.CREATE_PERMISSION_RESPONSE]: 'CREATE_PERMISSION_RESPONSE',
    [EMessageType.CHANNEL_BIND_REQUEST]: 'CHANNEL_BIND_REQUEST',
    [EMessageType.CHANNEL_BIND_RESPONSE]: 'CHANNEL_BIND_RESPONSE',
    [EMessageType.CHANNEL_BIND_ERROR_RESPONSE]: 'CHANNEL_BIND_ERROR_RESPONSE',
    [EMessageType.CONNECT_REQUEST]: 'CONNECT_REQUEST',
    [EMessageType.CONNECT_RESPONSE]: 'CONNECT_RESPONSE',
    [EMessageType.CONNECT_ERROR_RESPONSE]: 'CONNECT_ERROR_RESPONSE',
    [EMessageType.ADDRESS_INDICATION]: 'ADDRESS_INDICATION',
    [EMessageType.ADDRESS_INDICATION_ERROR_RESPONSE]: 'ADDRESS_INDICATION_ERROR_RESPONSE',
} as const satisfies Record<EMessageType, string>;

export const VStunMessageType = v.enum_(EMessageType);

export enum EAttributeType {
    MappedAddress = 0x0001,
    ResponseAddress = 0x0002,
    ChangeRequest = 0x0003,
    SourceAddress = 0x0004,
    ChangedAddress = 0x0005,
    Username = 0x0006,
    Password = 0x0007,
    MessageIntegrity = 0x0008,
    ErrorCode = 0x0009,
    UnknownAttributes = 0x000a,
    ReflectedFrom = 0x000b,
    Realm = 0x0014,
    Nonce = 0x0015,
    XorMappedAddress = 0x0020,
    Software = 0x8022,
    AlternateServer = 0x8023,
    Fingerprint = 0x8028,
    Lifetime = 0x000d,
    XorRelayedAddress = 0x0022,
    XorPeerAddress = 0x0024,
    Data = 0x002d,
}

export const attributeTypeNameMap = {
    [EAttributeType.MappedAddress]: 'MappedAddress',
    [EAttributeType.ResponseAddress]: 'ResponseAddress',
    [EAttributeType.ChangeRequest]: 'ChangeRequest',
    [EAttributeType.SourceAddress]: 'SourceAddress',
    [EAttributeType.ChangedAddress]: 'ChangedAddress',
    [EAttributeType.Username]: 'Username',
    [EAttributeType.Password]: 'Password',
    [EAttributeType.MessageIntegrity]: 'MessageIntegrity',
    [EAttributeType.ErrorCode]: 'ErrorCode',
    [EAttributeType.UnknownAttributes]: 'UnknownAttributes',
    [EAttributeType.ReflectedFrom]: 'ReflectedFrom',
    [EAttributeType.Realm]: 'Realm',
    [EAttributeType.Nonce]: 'Nonce',
    [EAttributeType.XorMappedAddress]: 'XorMappedAddress',
    [EAttributeType.Software]: 'Software',
    [EAttributeType.AlternateServer]: 'AlternateServer',
    [EAttributeType.Fingerprint]: 'Fingerprint',
    [EAttributeType.Lifetime]: 'Lifetime',
    [EAttributeType.XorRelayedAddress]: 'XorRelayedAddress',
    [EAttributeType.XorPeerAddress]: 'XorPeerAddress',
    [EAttributeType.Data]: 'Data',
} as const satisfies Record<EAttributeType, string>;

export const VStunAttributeType = v.enum_(EAttributeType);
